import axios from "axios";
import { authHeader } from "../../Services/Auth"; // Importation du header d'authentification


// üöÄ R√©cup√©rer tous les dossiers m√©dicaux
export const fetchMedicalRecords = async () => {
  try {
    const { data } = await axios.get('medical', {
      headers: authHeader(), // En-t√™te d'authentification
    });

    // V√©rification de la r√©ponse de l'API et renvoi des donn√©es appropri√©es
    if (data.success) {
      return data.records; // Si la r√©ponse contient `records`, on les retourne
    } else {
      console.error("Aucun dossier m√©dical trouv√©.");
      return []; // Retourner un tableau vide en cas d'absence de donn√©es
    }
  } catch (error) {
    // Log d√©taill√© pour d√©bogage, capture des erreurs sp√©cifiques du backend ou r√©seau
    console.error("Erreur lors de la r√©cup√©ration des dossiers m√©dicaux:", error);
    // Gestion des erreurs sp√©cifiques
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};

// üöÄ R√©cup√©rer les informations de l'utilisateur
export const fetchUserData = async () => {
  try {
    console.log("üîÑ R√©cup√©ration des donn√©es de l'utilisateur...");
    console.log("Headers envoy√©s:", authHeader());

    const { data } = await axios.get('users/me', {
      headers: authHeader(),
    });

    console.log("‚úÖ Donn√©es re√ßues:", data);

    return data.success ? data : null;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:", error);
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};


// üöÄ R√©cup√©rer un dossier m√©dical sp√©cifique par son ID
// üöÄ R√©cup√©rer un dossier m√©dical sp√©cifique par son ID
export const fetchMedicalRecordById = async (id) => {
  try {
    console.log(`üîÑ R√©cup√©ration du dossier m√©dical ID: ${id}...`);

    const { data } = await axios.get(`medical/${id}`, {
      headers: authHeader(),
    });

    // Affiche les donn√©es re√ßues dans la console
    console.log("‚úÖ Donn√©es re√ßues:", data);

    // V√©rifiez si les donn√©es contiennent les champs attendus
    if (data.success) {
      console.log("üìã D√©tails du dossier m√©dical:", data.record);
    } else {
      console.error("‚ùå Erreur: Les donn√©es re√ßues ne contiennent pas de dossier m√©dical valide.");
    }

    return data.success ? data.record : null;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration du dossier m√©dical ID ${id}:`, error);
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};

// üöÄ R√©cup√©rer le dossier m√©dical de l'utilisateur connect√©
export const fetchMedicalRecordByUser = async () => {
  try {
    const { data } = await axios.get('medical/me', {
      headers: authHeader(), // En-t√™te d'authentification
    });

    // Si le serveur retourne un succ√®s, on retourne le dossier
    if (data.success) {
      return data.record; // Retourne le dossier m√©dical
    } else {
      console.error('Dossier m√©dical non trouv√©.');
      return null; // Retourne null si aucun dossier n'a √©t√© trouv√©
    }
  } catch (error) {
    // Log d√©taill√© pour d√©bogage
    console.error('Erreur lors de la r√©cup√©ration du dossier m√©dical de l\'utilisateur connect√©:', error);
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};

// üöÄ Mettre √† jour un dossier m√©dical par son ID
export const updateMedicalRecord = async ({ id, updates }) => {
  try {
    console.log(`üîÑ Mise √† jour du dossier m√©dical ID: ${id}...`);
    
    const { data } = await axios.put(`medical/${id}`, updates, {
      headers: authHeader(),
    });

    console.log("‚úÖ Dossier mis √† jour:", data);

    return data.success ? data.record : null;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour du dossier m√©dical ID ${id}:`, error);
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};

// üöÄ Supprimer un dossier m√©dical par son ID
export const deleteMedicalRecord = async (id) => {
  try {
    console.log(`üóëÔ∏è Suppression du dossier m√©dical ID: ${id}...`);

    const { data } = await axios.delete(`medical/${id}`, {
      headers: authHeader(),
    });

    console.log("‚úÖ Suppression confirm√©e:", data);

    return data.success ? data : null;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la suppression du dossier m√©dical ID ${id}:`, error);
    throw new Error(error.response?.data?.message || "Erreur serveur");
  }
};

// Fonction pour r√©cup√©rer les statistiques des dossiers m√©dicaux cr√©√©s par mois pour le m√©decin connect√©
export const getMedicalRecordsStatsByMonthForMedecin = async () => {
  try {
      const response = await axios.get('medical/medical-records/stats-by-month-for-medecin');
      return response.data; // Retourne les donn√©es de la r√©ponse
  } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques des dossiers m√©dicaux :', error.response ? error.response.data : error.message);
      throw error;
  }
};